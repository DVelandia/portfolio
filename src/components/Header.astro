---
import Image from "astro/components/Image.astro"
import logo from "public/logo.webp"
import LenguageSelector from "@/components/ui/LenguageSelector.astro"
import ThemeToggle from "@/components/ui/ThemeToggle.astro"
import { getI18N } from "@/i18n"
import HamburgerButton from "@/icons/HamburgerButton.astro"

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })

const spanMenu = i18n.spanMenu
const currentYear = new Date().getFullYear()

const pages = ["about", "experience", "projects", "technologies"].map((key) => ({
	title: (i18n[key as keyof typeof i18n] as { id: string }).id,
	url: `${currentLocale === "en" ? "/en/" : "/"}#${(i18n[key as keyof typeof i18n] as { id: string }).id}`,
}))
---

<header class="fixed inset-x-0 z-20 px-4 py-4 backdrop-blur-md lg:p-0">
	<div
		class="mx-auto flex items-center justify-end gap-x-2 sm:w-[600px] lg:w-[740px] lg:justify-between"
	>
		<nav
			id="mobile-menu"
			class="fixed left-0 right-0 top-0 z-10 hidden h-dvh w-full flex-col items-center gap-2 bg-gray-200 text-center text-2xl transition-transform dark:bg-gray-900"
			aria-label="Mobile Navigation"
		>
			<aside class="flex min-h-16 w-full items-center justify-between pt-4">
				<span class="text-primary text-xl font-semibold uppercase">{spanMenu}</span>
			</aside>
			<div class="flex min-h-2 w-full items-center">
				<hr class="h-[2px] w-full border-t-0" />
			</div>
			<div
				class="content-mobile fixed left-0 right-0 top-0 z-20 flex h-dvh w-full flex-col place-content-center items-center gap-2 pt-16 text-center text-2xl"
			>
				<Image
					src={logo}
					alt="dvelandia logo"
					class="accent-drop-shadow my-4 max-w-60 drop-shadow-lg"
					width={200}
					height={200}
				/>
				<hr class="h-[2px] w-full border-t-0" />
				{
					pages.map((link) => (
						<>
							<a
								href={link.url}
								target="_self"
								rel="noopener noreferrer"
								class="menu-item transform rounded px-1 py-2 text-xl transition hover:text-primary-600 hover:dark:text-primary-400"
								aria-current="page"
								aria-label={link.title}
							>
								{i18n.menu[link.title as keyof typeof i18n.menu]}
							</a>
							<hr class="h-[2px] w-full border-t-0" />
						</>
					))
				}
				<div class="mt-8 flex flex-col gap-4 px-4 text-center md:flex-row lg:gap-6">
					<span class="text-dark text-center text-xl dark:text-dark-200">
						©️ {currentYear}
						{i18n.copyright}
					</span>
				</div>
			</div>
		</nav>
		<nav
			class="hidden w-full items-center justify-between py-4 pr-4 sm:flex"
			aria-label="Desktop Navigation"
		>
			{
				pages.map((link) => (
					<a
						class="nav-link relative z-10 overflow-hidden p-2 transition-all duration-300"
						aria-label={link.title}
						href={link.url}
						target="_self"
						rel="noopener noreferrer"
					>
						{i18n.menu[link.title as keyof typeof i18n.menu]}
					</a>
				))
			}
		</nav>
		<LenguageSelector />
		<ThemeToggle />
		<HamburgerButton />
	</div>

	<style>
		#mobile-menu {
			aside {
				padding-left: 6.5rem;
			}
			@media (max-width: 799px) {
				aside {
					padding-left: 1.5rem;
				}
			}
		}

		.nav-link::before {
			content: "";
			position: absolute;
			bottom: 0;
			left: 0;
			height: 2px;
			width: 0;
			background-color: #4299e1;
			backdrop-filter: blur(8px);
			border-radius: 0.5rem;
			z-index: -10;
			transition: all 0.5s;
		}
		.nav-link:hover::before {
			width: 100%;
		}

		@keyframes fadeIn {
			from {
				opacity: 0;
			}
			to {
				opacity: 1;
			}
		}

		@keyframes fadeOut {
			from {
				opacity: 1;
			}
			to {
				opacity: 0;
			}
		}

		@keyframes growIn {
			from {
				transform: scale(0);
				opacity: 0;
			}
			to {
				transform: scale(1);
				opacity: 1;
			}
		}

		@keyframes shrinkOut {
			from {
				transform: scale(1);
				opacity: 1;
			}
			to {
				transform: scale(0);
				opacity: 0;
			}
		}

		.menu-open {
			animation: fadeIn 0.2s ease forwards;
		}

		.menu-close {
			animation: fadeOut 0.2s ease forwards;
			opacity: 0;
		}

		.content-mobile {
			animation: growIn 0.35s ease forwards;
			opacity: 0;
		}

		html.dark hr {
			background: linear-gradient(to right, transparent 0%, white 50%, transparent 100%);
		}
		hr {
			background: linear-gradient(to right, transparent 0%, black 50%, transparent 100%);
		}
	</style>

	<script>
		document.addEventListener("astro:page-load", () => {
			const menuToggle = document.getElementById("menu-toggle")
			const mobileMenu = document.getElementById("mobile-menu")
			const menuItems = document.querySelectorAll(".menu-item")

			if (!menuToggle || !mobileMenu || !menuItems) {
				return
			}

			function closeMenu() {
				document.body.classList.remove("overflow-hidden")

				if (mobileMenu) {
					mobileMenu.classList.remove("menu-open")
					mobileMenu.classList.add("menu-close")
				}

				const hamburgerButton = document.querySelector(".hamburgerButton")
				if (hamburgerButton && hamburgerButton.classList.contains("open")) {
					hamburgerButton.classList.remove("open")
					hamburgerButton.setAttribute("aria-expanded", "false")
					hamburgerButton.setAttribute("aria-label", "Abrir menú de navegación")
				}

				setTimeout(() => {
					if (mobileMenu) {
						mobileMenu.classList.add("hidden")
					}
				}, 500)
			}

			menuToggle.addEventListener("click", () => {
				document.body.classList.toggle("overflow-hidden")
				if (mobileMenu && mobileMenu.classList.contains("menu-open")) {
					closeMenu()
				} else {
					if (mobileMenu) {
						mobileMenu.classList.remove("hidden")
						mobileMenu.classList.remove("menu-close")
						mobileMenu.classList.add("menu-open")
					}
					const hamburgerButton = document.querySelector(".hamburgerButton")
					if (hamburgerButton) {
						hamburgerButton.classList.add("open")
						hamburgerButton.setAttribute("aria-expanded", "true")
						hamburgerButton.setAttribute("aria-label", "Cerrar menú de navegación")
					}
					menuItems.forEach((item, index) => {
						if (item instanceof HTMLElement) {
							item.style.animationDelay = `${index * 0.1}s`
						}
					})
				}
			})

			menuItems.forEach((elem) => {
				elem.addEventListener("click", () => {
					closeMenu()
				})
			})

			if (window.matchMedia("(min-width: 1024px)").matches) {
				const sections = document.querySelectorAll("main > section")
				const navItems = document.querySelectorAll("header nav > a")
				const callback = (entries: IntersectionObserverEntry[]) => {
					entries.forEach((entry: IntersectionObserverEntry) => {
						if (entry.isIntersecting) {
							navItems.forEach((item) => {
								if (item.getAttribute("aria-label") === entry.target.id) {
									item.classList.add(
										"text-primary-600",
										"dark:text-primary-400",
										"hover:text-dark-900",
										"dark:hover:text-dark-50"
									)
								} else {
									item.classList.remove(
										"text-primary-600",
										"dark:text-primary-400",
										"text-dark",
										"hover:text-dark-900",
										"dark:text-dark-200",
										"dark:hover:text-dark-50"
									)
								}
							})
						}
					})
				}

				const observer = new IntersectionObserver(callback, {
					root: null,
					rootMargin: "0px",
					threshold: 0.69,
				})

				sections.forEach((section) => {
					observer.observe(section)
				})

				document.onvisibilitychange = () => {
					if (document.visibilityState === "hidden") {
						observer.disconnect()
					} else {
						sections.forEach((section) => {
							observer.observe(section)
						})
					}
				}
			}
		})
	</script>
</header>
